1.启动zookeeper
nohup ./bin/zookeeper-server-start.sh config/zookeeper.properties &

2.启动kafka
./bin/kafka-server-start.sh config/server.properties

3.创建topic
./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic hello

4.查看kafka主题列表
./bin/kafka-topics.sh --list --zookeeper localhost:2181

4.进入发送消息
./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic hello

5.进入接收消息
./bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic hello --from-beginning

6.配置优化(精确匹配索引名，防止误删除)
http://192.168.253.138:9200/_cluster/settings
{
    "transient": {
        "action.destructive_requires_name": true
    }
}

7.配置优化(索引刷新设置为30s)
http://192.168.253.138:9200/_all/_settings?preserve_existing=true
{
    "index.refresh_interval": "1s"
}

8.nginx负载均衡es
./configure --with-stream
stream {
    upstream backend {
           server 192.168.253.138:9300;
           server 192.168.253.139:9300;
           server 192.168.253.140:9300;
    }

    server {
           listen 7001;
           proxy_timeout 20s;
           proxy_pass backend;
    }
}

9.elasticsearch 加密
printf "es5:$(openssl passwd -crypt elasticsearch)\n" > passwords

10.配置nginx加密elasticsearch,并解决跨域问题
访问路径
http://localhost:9100/?auth_user=es5&auth_password=elasticsearch&base_uri=http://192.168.253.138:8888
 upstream elasticsearch {
      server 192.168.253.138:9200 weight=10;
      server 192.168.253.139:9200 weight=10;
      server 192.168.253.140:9200 weight=10;
  }

   server {
        listen       8888;
        server_name  localhost;

        auth_basic "Protection";
        auth_basic_user_file /usr/local/nginx/password/passwords;

        location / {
            proxy_pass http://elasticsearch;
            proxy_redirect off;

        if ($request_method = 'OPTIONS') {
           add_header 'Access-Control-Allow-Origin' '*';
           add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS';
           add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
           add_header 'Access-Control-Max-Age' 172800;
           add_header 'Content-Type' 'text-plain; charset=utf-8';
           add_header 'Content-Length' 0;
           return 204;
        }
       }
     }

11-5 安全控制_选择性认证
server {
        listen       8888;
        server_name  localhost;

        location @general {
             proxy_pass http://elasticsearch;
             proxy_redirect off;
        }

        location @need_protection {
             auth_basic "Protection";
             auth_basic_user_file /usr/local/nginx/password/passwords;

             proxy_pass http://elasticsearch;
             proxy_redirect off;
        }

        location / {
        if ($request_method = 'OPTIONS') {
           add_header 'Access-Control-Allow-Origin' '*';
           add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS';
           add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
           add_header 'Access-Control-Max-Age' 172800;
           add_header 'Content-Type' 'text-plain; charset=utf-8';
           add_header 'Content-Length' 0;
           return 204;
        }
            error_page 598 = @general;
            error_page 599 = @need_protection;

            if ($request_uri ~ ^/_cat/.*$) {
                return 598;
            }
            return 599;

       }
     }

11-6 基于SpringSchedule的监控任务
http://192.168.253.138:8888/_cluster/health
if ($request_uri ~ ^/_cluster/health$) {
                return 598;
            }
